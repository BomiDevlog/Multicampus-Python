# 딕셔너리
# key와 value을 쌍으로 갖는 자료형
# key는 중복되지않는다 (unique하다)
# key를 이용하여 값을 참조
# 딕셔너리의 리터럴 {} [키]:[값]

# 마치 DB Table 컬럼명(키), 자바의 해시맵, JS의 객체(map)

# >>> person = {
# ... '이름' : '홍길동',
# ... '나이' : 26,
# ... '몸무게' : 82 }
# >>> person ['이름']
# '홍길동'
# >>> person ['나이']
# 26
# >>> person ['몸무게']
# 82
# >>> person ['성함'] # 존재하지 않는 key 를 읽으면? 예외발생
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# KeyError: '성함'
# if "성함" in person 이렇게 검사해주면 에러안남

# 딕셔너리이름[키] = 값
# 키가 없으면 추가
# 키가 존재하면 수정

# >>> person['직업'] = '율도국의 왕'
# >>> person['나이'] = 27
# >>> person
# {'이름': '홍길동', '나이': 27, '몸무게': 82, '직업': '율도국의 왕'}

# [...] 리스트 (...) 튜플 {...} 딕셔너리

# ---------------
# 딕셔너리의 함수, 연산
# len() : 길이
# in, not in : 키, 값이 딕셔너리에 있는지 확인
# ==, !=

# >>> person
# {'이름': '홍길동', '나이': 27, '몸무게': 82, '직업': '율도국의 왕'}
# >>> len(person)
# 4
# >>> '이름' in person
# True
# >>> '성함' in person
# False
# >>> '홍길동' in person # '홍길동'은 값에 있으나 키에 없음!! 키값을 기준으로 찾는 것! 주의!!
# False

# 순서바뀌어도 상관없음 key, value일치하는지 확인.
# >>> d1 = {'이름': '홍길동', '나이':26}
# >>> d2 = {'나이':26, '이름':'홍길동'}
# >>> d1 == d2
# True

# 딕셔너리 메소드
# keys() 키값 목록 리턴
# values() 밸류값 목록 리턴
# items() (키, 값)을 튜플로 묶어서 목록을 리턴
# get(key) key에 대한값 반환. 키가 없으면 None. -- 안전하게 읽을수있음.
# pop(key) : 키에 대한 값을 반환하고 그 항목을 삭제
# popitem() : 랜덤하게  ? 실제로는 맨끝에 있는걸 반환하고 삭제.
# clear() 모든 항목 삭제 
# 
# >>> person
# {'이름': '홍길동', '나이': 27, '몸무게': 82, '직업': '율도국의 왕'}
# >>> person.keys()
# dict_keys(['이름', '나이', '몸무게', '직업'])
# >>> person.values()
# dict_values(['홍길동', 27, 82, '율도국의 왕'])
# >>> person.items()
# dict_items([('이름', '홍길동'), ('나이', 27), ('몸무게', 82), ('직업', '율도국의 왕')])             

# 딕셔너리 개별 요소 읽기
# 딕셔너리명['키']
# 키가 존재하지 않는 경우 예외 발생
# get('키')
# 키가 존재하면 값을 리턴
# 키가 존재하지 않으면 None 리턴

# >>> person
# {'이름': '홍길동', '나이': 27, '몸무게': 82, '직업': '율도국의 왕'}
# >>> person['취미']
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# KeyError: '취미'
# >>> person.get('취미') # None 리턴
# >>> person.get('이름')
# '홍길동'

# >>> person.get('취미', '독서')
# '독서'
# >>> person.get('이름', '아무개')
# '홍길동'

# get(키, 디폴트) 디폴트값 설정해서, 키값이 있으면 해당 밸류값 리턴하고 키값이 없으면 디폴트값이 리턴됨

# >>> person
# {'이름': '홍길동', '나이': 27, '몸무게': 82, '직업': '율도국의 왕'}
# >>> person.popitem()
# ('직업', '율도국의 왕')
# >>> person.popitem()
# ('몸무게', 82)
# >>> person
# {'이름': '홍길동', '나이': 27}
# >>> person.pop('나이')
# 27
# >>> person
# {'이름': '홍길동'}
# >>> person.clear()
# >>> person
# {}

# bool({}) # 빈 사전을 부울린으로 형변환하면?
# >>> bool({})
# False
# >>> bool([])
# False
# >>> bool(())
# False
# 콜렉션이 비어있으면 False

# 딕셔너리 순회 iteration: for루프를 이용하여 모든 요소에 접근 -> 키값을 반환
# >>> person = {'이름': '홍길동', '나이': 27, '몸무게': 82, '직업': '율도국의 왕'}
# >>> for a in person:
# ...  print(a)
# ...
# 이름
# 나이
# 몸무게
# 직업

# >>> for key, value in person.items() : # 튜플의 언패킹 이용
# ...  print(f'{key} : {value}')
# ...
# 이름 : 홍길동
# 나이 : 27
# 몸무게 : 82
# 직업 : 율도국의 왕